<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sql">

<!-- 회원가입 -->
<insert id="signup">
	insert into member (id, name, password, addr, agentF, agentA)
		values (#{id}, #{name}, #{password}, #{addr}, #{agentF}, #{agentA})
</insert>
<!-- 로그인 -->
<select id="login" resultType="com.ojt.domain.MemberVO">
	select *
	from member
	where (id=#{id} and password=#{password}) or (id=#{id} and temporary=#{password})
</select>
<!-- 로그인 시 현재 날짜, 실패=0 으로 업데이트 -->
<update id="loginDate">
	update member
	set (finalInDtm, failInCnt)=(CURRENT_DATE, 0)
	where (id=#{id} and password=#{password}) or (id=#{id} and temporary=#{password})
</update>
<!-- 로그인 실패 처리 -->
<update id="loginFail">
	update member
	set failInCnt=failInCnt+1
	where id=#{id}
</update>
<!-- 임시 비밀번호 발급 -->
<update id="tmpPwd">
	update member
	set temporary=#{password}
	where id=#{id}
</update>

<!-- 회원가입 시 rec에 insert -->
<insert id="recInit" parameterType="com.ojt.domain.MemberVO">
	insert into rec 
	select m.cd_item, #{id}, 0
	from ms_agentitem m
</insert>

<!-- 위치 -->
<select id="locationList" resultType="com.ojt.domain.LocVO"><!-- 이렇게 해도 리스트로 넘겨주도록 MyBatis 설계 -->
	select *
	from ms_agent
	where addr_zip like '서울%'
</select>
<!-- 가장 가까운 위치 -->
<select id="location" parameterType="com.ojt.domain.LatLngVO" resultType="com.ojt.domain.LocVO">
	select cd_agent,nm_agentform, addr_zip, addr_detail, 
				earth_distance(ll_to_earth(#{lat}, #{lng}), ll_to_earth(lat, lng)
				) as distance
	from ms_agent
	where addr_zip like '${location}%' and gbn_agent=#{gbn}
	order by distance ASC
	limit 1;
</select>

<!-- 대리점 조회 -->
<select id="getAgent" parameterType="String" resultType="com.ojt.domain.LocVO">
	select cd_agent, nm_agentform
	from ms_agent
	where cd_agent=#{agentId}
	limit 1;
</select>

<!-- 대리점 별 아이템, 가격 조회 -->
<!-- 겹치는 아이템은 하나만 출력 (규칙: max cd_agent로  가져옴) -->
<select id="itemList" resultType="com.ojt.domain.ItemVO" >
	select max(cd_agent) cd_agent,cd_item,  nm_item, amt_amount, src
	from ms_agentitem
	where cd_agent=#{agentF} or cd_agent=#{agentA}
	group by cd_item,  nm_item, amt_amount, src
	<!-- select cd_agent, cd_item, nm_item, amt_amount, src
	from ms_agentitem
	where cd_agent=#{agentF} or cd_agent=#{agentA} -->
</select>

<select id="itemRecommendList" parameterType="com.ojt.domain.RecVO" resultType="com.ojt.domain.ItemVO" >
	select distinct(m1.cd_item),m1.cd_agent, m1.nm_item, m1.remark, m1.amt_amount, m1.src,  
		(case when sqrt(SUM(r1.isSold))*sqrt(SUM(r2.isSold))=0 then 0 else SUM(r1.isSold * r2.isSold)/(sqrt(SUM(r1.isSold))*sqrt(SUM(r2.isSold))) end) as result
	from ms_agentitem m1, (select cd_item, sum(qty_delivtot) selTot
							from sl_saleitem
							where cd_customer=#{memberid}
							group by cd_item
							order by selTot desc
							limit 3) m2
		, rec r1 inner join rec r2 on r1.member=r2.member
	where m1.cd_item=r1.cd_item and m2.cd_item=r2.cd_item and m1.cd_item != m2.cd_item and (m1.cd_agent=#{agentF} or m1.cd_agent=#{agentA})
	group by m1.cd_item, m1.nm_item, m1.remark, m1.amt_amount, m1.src, m1.cd_agent
	order by result DESC
	limit 2;
</select>

<!-- 아이템 별 정보 조회 -->
<select id="itemDetail" parameterType="String" resultType="com.ojt.domain.ItemVO">
	select max(cd_agent) cd_agent, cd_item, nm_item, amt_amount, remark
	from ms_agentitem
	where cd_item=#{item}
	group by cd_item, nm_item, amt_amount, remark
	<!-- select max(cd_agent), cd_item, nm_item, amt_amount, remark
	from ms_agentitem
	where cd_item=#{item}
	limit 1; -->
</select>

<!-- 아이템 이미지 크롤링 -->
<update id="itemCrawl">
	update ms_agentitem 
	set src=#{src}
	where nm_item=#{name}
</update>


<!-- 주문정보 -->
<insert id="sale" parameterType="com.ojt.domain.SaleVO">
	insert into sl_sale (no_saleslip, amt_amount, cd_agent, cd_customer, dt_sale, gbn_slip)
	values (#{noSaleslip}, #{amount}, #{agent}, #{memberid}, CURRENT_DATE, 'NN');
</insert>

<!-- 주문아이템 -->
<insert id="saleItem" parameterType="com.ojt.domain.SaleItemVO">
	insert into sl_saleitem 
		(no_saleslip, amt_amount, amt_price, cd_agent, cd_item, dt_sale, qty_delivtot, seq, cd_customer)
	values 
	(#{noSaleslip}, #{amount},#{price},#{agent}, #{item},CURRENT_DATE, #{qty}, #{seq}, #{memberid});
</insert>

<!-- 주문 시 rec issold update -->
<update id="recAdd">
	update rec
	set isSold=1
	where cd_item=#{item} and member=#{memberid};
</update>

<!-- 장바구니 -->
<insert id="basket" parameterType="com.ojt.domain.BasketVO">
<!-- 	insert into basket
			(cd_agent, cd_item, memberid, nm_item, amt_amount, amt_price, qty_delivtot)
	select max(cd_agent), #{item}, #{memberid}, #{name}, #{amount}, #{price}, #{qty}
	from ms_agentitem
	where cd_item=#{item} and (cd_agent=#{agentF} or cd_agent=#{agentA}) -->
	insert into basket
		(memberid, nm_item, amt_amount, amt_price, cd_agent, cd_item, qty_delivtot)
	values 
	(#{memberid}, #{name}, #{amount},#{price},#{agent}, #{item}, #{qty});
</insert>

<!-- 장바구니 아이템 조회 -->
<select id="basketList" resultType="com.ojt.domain.BasketVO">
	select cd_agent as agent, amt_price as price, nm_item as name, cd_item as item, qty_delivtot as qty, idx
	from basket
	where memberid=#{memberid}
</select>
<!-- 장바구니 - 최근 주문 아이템 조회 -->
<select id="showRecent" resultType="com.ojt.domain.SaleItemVO">
	select s.dt_sale,s.cd_agent agent,s.cd_item item,s.qty_delivTot qty, s.amt_price price, (select nm_item from ms_agentitem where cd_item=s.cd_item) as name
	from sl_saleitem s
	where s.no_saleslip=(select no_saleslip from sl_sale where cd_customer=#{memberid} order by no_saleslip desc limit 1) and s.cd_customer=#{memberid}
	order by s.seq asc;
</select>

<!-- 장바구니 아이템 삭제 -->
<delete id="deleteBasket">
	delete from basket
	where idx=#{idx}
</delete>
</mapper> 